<?php

function stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
 
        if (isset($_COOKIE['wplit_product_id'] )){

            global $stripe_options;
    
            // load the stripe libraries

            require 'vendor/autoload.php';
    
            // retrieve the token generated by stripe.js
            $token = $_POST['stripeToken'];

            // $stripe_options_mode = get_option('stripe_settings_test_mode');

            $product_id = $_COOKIE['wplit_product_id']; 

            $stripeamount = get_post_meta( $product_id, 'wplit_product_price', true );

            // Convert amount to Stripe price
            $amount = $stripeamount*100;

            //	$amount = get_option('stripe_settings_amount')*100;
    
            // check if we are using test mode
            // if(isset($stripe_options_mode) && $stripe_options_mode) {
            // 	$secret_key = get_option('stripe_settings_test_secret_key');
            // } else {
            // 	$secret_key = get_option('stripe_settings_live_secret_key');
            // }
    
            $secret_key = 'sk_test_51K1Z01H0HAiCT4KEKkcEq5RGIgs6p4eVhQxaZ67cVG3wFHNVzBpm8TUGuOLQ2HMg7dG0i3qdK4rD0OsMMaBqakLK00ZbIammp2';


            // attempt to charge the customer's card
            try {
                \Stripe\Stripe::setApiKey($secret_key);
                $charge = \Stripe\Charge::create(array(
                        'amount' => $amount, // 
                        'currency' => 'usd',
                        'card' => $token
                    )
                );

                $success = json_encode($charge->paid); // Expected value = true
                $success = json_encode($charge->status); // Expected value = succeeded
                if($success) { // or $success == "succeeded" depending on which array key you go for.
                    // Payment succeeded! Do something...
                    setcookie("devllo_stripe_payment_status", 'success', time()+5, '/');

                    // redirect on successful payment		
                    $WPLit_Add_License = new WPLit_Add_License;
                    $WPLit_Add_License->add_license();	

                    $redirect = add_query_arg('payment', 'success', '/licenses/');

                    do_action('wplit_after_stripe_checkout');
                }else
                {
                    print_r(json_encode($charge->failure_message));
                }

                // Do something else...

            //	var_dump($charge);
            //	exit; 
            } catch (Exception $e) {
                // redirect on failed payment

                $redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
            }
    
            // redirect back to our previous page with the added query variable
            wp_redirect($redirect); exit;
        }
	}
}
add_action('init', 'stripe_process_payment');

    // $wplit_prouct_price = get_post_meta( 34, 'wplit_product_price', true );
/*
    require 'vendor/autoload.php';

    // require 'vendeor/stripe-php/init.php';

    // require_once 'stripe-scripts.php';


    // This is a sample test API key.
    \Stripe\Stripe::setApiKey('sk_test_51K1Z01H0HAiCT4KEKkcEq5RGIgs6p4eVhQxaZ67cVG3wFHNVzBpm8TUGuOLQ2HMg7dG0i3qdK4rD0OsMMaBqakLK00ZbIammp2');

    function calculateOrderAmount(array $items): int {

        // Replace this constant with a calculation of the order's amount
        // Calculate the order total on the server to prevent
        // people from directly manipulating the amount on the client
       
        $Stripe_Scipts = new Stripe_Scipts;
        $wplit_product_price = $Stripe_Scipts->wplit_load_stripe_scripts();
        $calc_wplit_product_price = $wplit_product_price*100;

        return $calc_wplit_product_price;
    }

    header('Content-Type: application/json');

    try {
        // retrieve JSON from POST body
        $jsonStr = file_get_contents('php://input');
        $jsonObj = json_decode($jsonStr);

        // Create a PaymentIntent with amount and currency
        $paymentIntent = \Stripe\PaymentIntent::create([
            'amount' => calculateOrderAmount($jsonObj->items),
            'currency' => 'eur',
            'automatic_payment_methods' => [
                'enabled' => true,
            ],
        ]);

        $output = [
            'clientSecret' => $paymentIntent->client_secret,
        ];

        echo json_encode($output);
    } catch (Error $e) {
        http_response_code(500);
        echo json_encode(['error' => $e->getMessage()]);
    }


*/