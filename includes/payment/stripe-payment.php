<?php

include('stripe-scripts.php');

function stripe_process_payment() {
	if(isset($_POST['action']) && $_POST['action'] == 'stripe' && wp_verify_nonce($_POST['stripe_nonce'], 'stripe-nonce')) {
 
        if (isset($_COOKIE['wplit_product_id'] )){

            global $stripe_options;
    
            // load the stripe libraries

            require 'vendor/autoload.php';
    
            // retrieve the token generated by stripe.js
            $token = $_POST['stripeToken'];

            $stripe_options_mode = get_option('wplit-stripe-settings-test-mode');

            $product_id = $_COOKIE['wplit_product_id']; 

            $stripeamount = get_post_meta( $product_id, 'wplit_product_price', true );

            // Convert amount to Stripe price
            $amount = $stripeamount*100;

            //	$amount = get_option('stripe_settings_amount')*100;
    
            // check if we are using test mode
            if(isset($stripe_options_mode) && $stripe_options_mode) {
            	$secret_key = get_option('wplit-stripe-settings-test-sk');
            } else {
            	$secret_key = get_option('wplit-stripe-settings-live-sk');
            }
    
            // $secret_key = 'sk_test_51K1Z01H0HAiCT4KEKkcEq5RGIgs6p4eVhQxaZ67cVG3wFHNVzBpm8TUGuOLQ2HMg7dG0i3qdK4rD0OsMMaBqakLK00ZbIammp2';


            // attempt to charge the customer's card
            try {
                \Stripe\Stripe::setApiKey($secret_key);
                $charge = \Stripe\Charge::create(array(
                        'amount' => $amount, // 
                        'currency' => 'usd',
                        'card' => $token
                    )
                );

                $success = json_encode($charge->paid); // Expected value = true
                $success = json_encode($charge->status); // Expected value = succeeded
                if($success) { // or $success == "succeeded" depending on which array key you go for.
                    // Payment succeeded! Do something...
                    setcookie("devllo_stripe_payment_status", 'success', time()+5, '/');

                    // redirect on successful payment		
                    $WPLit_Add_License = new WPLit_Add_License;
                    $WPLit_Add_License->add_license();	

                    $url = get_permalink(get_option('wplit-licenses-page'));   

                    $redirect = add_query_arg('payment', 'success', $url );

                    do_action('wplit_after_stripe_checkout');
                }else
                {
                    print_r(json_encode($charge->failure_message));
                }

                // Do something else...

            //	var_dump($charge);
            //	exit; 
            } catch (Exception $e) {
                // redirect on failed payment

                $redirect = add_query_arg('payment', 'failed', $_POST['redirect']);
            }
    
            // redirect back to our previous page with the added query variable
            wp_redirect($redirect); exit;
        }
	}
}
add_action('init', 'stripe_process_payment');